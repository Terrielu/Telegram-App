import os
import logging
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
import openai

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –í–∫–ª—é—á–∞–µ–º CORS (—Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∫—Ä–æ—Å—Å-–¥–æ–º–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –æ–±—â–∞–ª—Å—è —Å –±—ç–∫–µ–Ω–¥–æ–º)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –õ—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ö–æ—Å—Ç—ã –≤ –ø—Ä–æ–¥–µ
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–∂–∏–¥–∞–µ—Ç JSON —Å –ø–æ–ª–µ–º prompt
class SearchRequest(BaseModel):
    prompt: str

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª—é—á API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
openai_api_key = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
if not openai_api_key:
    logging.warning("‚ùó –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Å openai>=1.0.0)
client = openai.OpenAI(api_key=openai_api_key)

@app.post("/search")
async def search_real_estate(request: SearchRequest):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –∞–≥–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –ü–æ–º–æ–≥–∏ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞."},
                {"role": "user", "content": request.prompt}
            ]
        )

        # –î–æ—Å—Ç–∞—ë–º –æ—Ç–≤–µ—Ç –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        message = response.choices[0].message.content
        return {"result": message}

    except Exception as e:
        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        logging.error(f"üî• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}\n")
        return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å –∫–ª—é—á OpenAI –∏ –ª–æ–≥."}

